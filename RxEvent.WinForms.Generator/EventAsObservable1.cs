// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 15.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace RxEvent.WinForms.Generator
{
    using System.Linq;
    using System.Collections.Generic;
    using System.Text.RegularExpressions;
    using System.Reflection;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class EventAsObservable : EventAsObservableBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 11 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"

    // 設定：ここに生成したいクラス(のTypeをFullNameで)を足してください(以下の4つは例)
    // クラスによってはassemblyの増減が必要です、WPF/Silverlightなどはフルパス直書きしてください
    var types = new[] {
			typeof(System.Windows.Forms.AxHost), 
			typeof(System.Windows.Forms.BindingNavigator), 
			typeof(System.Windows.Forms.BindingSource), 
			typeof(System.Windows.Forms.Button), 
			typeof(System.Windows.Forms.ButtonBase), 
			typeof(System.Windows.Forms.CheckBox), 
			typeof(System.Windows.Forms.CheckedListBox), 
			typeof(System.Windows.Forms.ColorDialog), 
			typeof(System.Windows.Forms.ColumnHeader), 
			typeof(System.Windows.Forms.ComboBox), 
			typeof(System.Windows.Forms.CommonDialog), 
			typeof(System.Windows.Forms.ContainerControl), 
			typeof(System.Windows.Forms.ContextMenu), 
			typeof(System.Windows.Forms.ContextMenuStrip), 
			typeof(System.Windows.Forms.Control), 
			typeof(System.Windows.Forms.DataGrid), 
			typeof(System.Windows.Forms.DataGridBoolColumn), 
			typeof(System.Windows.Forms.DataGridColumnStyle), 
			typeof(System.Windows.Forms.DataGridTableStyle), 
			typeof(System.Windows.Forms.DataGridTextBox), 
			typeof(System.Windows.Forms.DataGridTextBoxColumn), 
			typeof(System.Windows.Forms.DataGridView), 
			typeof(System.Windows.Forms.DataGridViewComboBoxEditingControl), 
			typeof(System.Windows.Forms.DataGridViewTextBoxEditingControl), 
			typeof(System.Windows.Forms.DateTimePicker), 
			typeof(System.Windows.Forms.Design.ComponentEditorForm), 
			typeof(System.Windows.Forms.Design.ComponentEditorPage), 
			typeof(System.Windows.Forms.DomainUpDown), 
			typeof(System.Windows.Forms.ErrorProvider), 
			typeof(System.Windows.Forms.FileDialog), 
			typeof(System.Windows.Forms.FlowLayoutPanel), 
			typeof(System.Windows.Forms.FolderBrowserDialog), 
			typeof(System.Windows.Forms.FontDialog), 
			typeof(System.Windows.Forms.Form), 
			typeof(System.Windows.Forms.GroupBox), 
			typeof(System.Windows.Forms.HelpProvider), 
			typeof(System.Windows.Forms.HScrollBar), 
			typeof(System.Windows.Forms.ImageList), 
			typeof(System.Windows.Forms.Label), 
			typeof(System.Windows.Forms.LinkLabel), 
			typeof(System.Windows.Forms.ListBox), 
			typeof(System.Windows.Forms.ListControl), 
			typeof(System.Windows.Forms.ListView), 
			typeof(System.Windows.Forms.MainMenu), 
			typeof(System.Windows.Forms.MaskedTextBox), 
			typeof(System.Windows.Forms.MdiClient), 
			typeof(System.Windows.Forms.Menu), 
			typeof(System.Windows.Forms.MenuItem), 
			typeof(System.Windows.Forms.MenuStrip), 
			typeof(System.Windows.Forms.MonthCalendar), 
			typeof(System.Windows.Forms.NotifyIcon), 
			typeof(System.Windows.Forms.NumericUpDown), 
			typeof(System.Windows.Forms.OpenFileDialog), 
			typeof(System.Windows.Forms.PageSetupDialog), 
			typeof(System.Windows.Forms.Panel), 
			typeof(System.Windows.Forms.PictureBox), 
			typeof(System.Windows.Forms.PrintDialog), 
			typeof(System.Windows.Forms.PrintPreviewControl), 
			typeof(System.Windows.Forms.PrintPreviewDialog), 
			typeof(System.Windows.Forms.ProgressBar), 
			typeof(System.Windows.Forms.PropertyGrid), 
			typeof(System.Windows.Forms.RadioButton), 
			typeof(System.Windows.Forms.RichTextBox), 
			typeof(System.Windows.Forms.SaveFileDialog), 
			typeof(System.Windows.Forms.ScrollableControl), 
			typeof(System.Windows.Forms.ScrollBar), 
			typeof(System.Windows.Forms.SplitContainer), 
			typeof(System.Windows.Forms.Splitter), 
			typeof(System.Windows.Forms.SplitterPanel), 
			typeof(System.Windows.Forms.StatusBar), 
			typeof(System.Windows.Forms.StatusBarPanel), 
			typeof(System.Windows.Forms.StatusStrip), 
			typeof(System.Windows.Forms.TabControl), 
			typeof(System.Windows.Forms.TableLayoutPanel), 
			typeof(System.Windows.Forms.TabPage), 
			typeof(System.Windows.Forms.TextBox), 
			typeof(System.Windows.Forms.TextBoxBase), 
			typeof(System.Windows.Forms.ThreadExceptionDialog), 
			typeof(System.Windows.Forms.Timer), 
			typeof(System.Windows.Forms.ToolBar), 
			typeof(System.Windows.Forms.ToolBarButton), 
			typeof(System.Windows.Forms.ToolStrip), 
			typeof(System.Windows.Forms.ToolStripButton), 
			typeof(System.Windows.Forms.ToolStripComboBox), 
			typeof(System.Windows.Forms.ToolStripContainer), 
			typeof(System.Windows.Forms.ToolStripContentPanel), 
			typeof(System.Windows.Forms.ToolStripControlHost), 
			typeof(System.Windows.Forms.ToolStripDropDown), 
			typeof(System.Windows.Forms.ToolStripDropDownButton), 
			typeof(System.Windows.Forms.ToolStripDropDownItem), 
			typeof(System.Windows.Forms.ToolStripDropDownMenu), 
			typeof(System.Windows.Forms.ToolStripItem), 
			typeof(System.Windows.Forms.ToolStripLabel), 
			typeof(System.Windows.Forms.ToolStripMenuItem), 
			typeof(System.Windows.Forms.ToolStripOverflow), 
			typeof(System.Windows.Forms.ToolStripOverflowButton), 
			typeof(System.Windows.Forms.ToolStripPanel), 
			typeof(System.Windows.Forms.ToolStripPanelRow), 
			typeof(System.Windows.Forms.ToolStripProgressBar), 
			typeof(System.Windows.Forms.ToolStripSeparator), 
			typeof(System.Windows.Forms.ToolStripSplitButton), 
			typeof(System.Windows.Forms.ToolStripStatusLabel), 
			typeof(System.Windows.Forms.ToolStripTextBox), 
			typeof(System.Windows.Forms.ToolTip), 
			typeof(System.Windows.Forms.TrackBar), 
			typeof(System.Windows.Forms.TreeView), 
			typeof(System.Windows.Forms.UpDownBase), 
			typeof(System.Windows.Forms.UserControl), 
			typeof(System.Windows.Forms.VScrollBar), 
			typeof(System.Windows.Forms.WebBrowser), 
			typeof(System.Windows.Forms.WebBrowserBase), 
    };

            
            #line default
            #line hidden
            this.Write("using System.Reactive.Linq;\r\n \r\n");
            
            #line 130 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
 foreach(var x in GenerateTemplates(types)) {
            
            #line default
            #line hidden
            this.Write(" \r\nnamespace ");
            
            #line 132 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    ");
            
            #line 134 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
 foreach(var ct in x.ClassTemplates) {
            
            #line default
            #line hidden
            this.Write(" \r\n    public static class ");
            
            #line 136 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ct.Classname));
            
            #line default
            #line hidden
            this.Write("EventExtensions\r\n    {\r\n        ");
            
            #line 138 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
 foreach(var ev in ct.EventTemplates) {
            
            #line default
            #line hidden
            this.Write(" \r\n        public static IObservable<");
            
            #line 140 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.Args));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 140 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.Name));
            
            #line default
            #line hidden
            this.Write("AsObservable");
            
            #line 140 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ct.GenericArgs));
            
            #line default
            #line hidden
            this.Write("(this ");
            
            #line 140 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ct.Classname));
            
            #line default
            #line hidden
            
            #line 140 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ct.GenericArgs));
            
            #line default
            #line hidden
            this.Write(" source)\r\n        {\r\n            return Observable.FromEvent<");
            
            #line 142 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.Handler + (ev.IsGeneric ? "<" + ev.Args + ">" : "")));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 142 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.Args));
            
            #line default
            #line hidden
            this.Write(">(\r\n                h => (sender, args) => h(args),\r\n                h => source." +
                    "");
            
            #line 144 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.Name));
            
            #line default
            #line hidden
            this.Write(" += h,\r\n                h => source.");
            
            #line 145 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ev.Name));
            
            #line default
            #line hidden
            this.Write(" -= h);\r\n        }\r\n        ");
            
            #line 147 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n    ");
            
            #line 149 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
 }
            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 151 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"
 }
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 152 "d:\dev\RxEvent.WinForms\RxEvent.WinForms.Generator\EventAsObservable.tt"

    IEnumerable<T> TraverseNode<T>(T root, Func<T, T> selector)
    {
        var current = root;
        while (current != null)
        {
            yield return current;
            current = selector(current);
        }
    }
 
    IEnumerable<ObservableTemplate> GenerateTemplates(Type[] types)
    {
        return types.SelectMany(t => TraverseNode(t, x => x.BaseType))
            .Distinct()
            .GroupBy(t => t.Namespace)
            .Select(g => new ObservableTemplate
            {
                Namespace = g.Key,
                ClassTemplates = g.Select(t => new ClassTemplate(t))
                    .Where(t => t.EventTemplates.Any())
                    .ToArray()
            })
            .Where(a => a.ClassTemplates.Any())
            .OrderBy(a => a.Namespace);
    }
 
    class ObservableTemplate
    {
        public string Namespace;
        public ClassTemplate[] ClassTemplates;
    }
 
    class ClassTemplate
    {
        public string Classname, GenericArgs;
        public EventTemplate[] EventTemplates;
 
        public ClassTemplate(Type type)
        {
            Classname = Regex.Replace(type.Name, "`.*$", "");
            GenericArgs = type.IsGenericType
                ? "<" + string.Join(",", type.GetGenericArguments().Select((_, i) => "T" + (i + 1))) + ">"
                : "";
            EventTemplates = type.GetEvents(BindingFlags.Public | BindingFlags.InvokeMethod | BindingFlags.DeclaredOnly | BindingFlags.Instance)
                .Select(ei => new { EventInfo = ei, Args = ei.EventHandlerType.GetMethod("Invoke").GetParameters().Last().ParameterType })
                .Where(a => a.Args == typeof(EventArgs) || a.Args.IsSubclassOf(typeof(EventArgs)))
                .Select(a => new EventTemplate
                {
                    Name = a.EventInfo.Name,
                    Handler = Regex.Replace(a.EventInfo.EventHandlerType.FullName, "`.*$", ""),
                    Args = a.Args.FullName,
                    IsGeneric = a.EventInfo.EventHandlerType.IsGenericType
                })
                .ToArray();
        }
    }
 
    class EventTemplate
    {
        public string Name, Args, Handler;
        public bool IsGeneric;
    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class EventAsObservableBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
